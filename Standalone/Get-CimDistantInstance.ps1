<#
.SYNOPSIS
Returns one or more CIM instances distantly associated with the source along the specified path.
.DESCRIPTION
Returns one or more CIM instances distantly associated with the source along the specified path.
Paths can be generated by Find-CimAssociatedInstance.
.PARAMETER InputObject
The source CIM instance.
.PARAMETER PathToInstance
The path to the desired final instance name.
The path is composed of the intermediary and final CIM class names, separated by the value of -Delimiter.
Do not include the class name of the source instance.
If empty or any component of the path is not found, returns nothing.
.PARAMETER KeyOnly
If set, will only retrieve the key properties of the final instance(s).
.PARAMETER Delimiter
The character that -PathToInstance uses as a delimiter. Defaults to /
.NOTES
Author: Eric Siron
Version 1.1, February 13, 2019
Released under MIT license
.INPUTS
Microsoft.Management.Infrastructure.CimInstance[]
String
.EXAMPLE
PS C:\> $VMHost = (Get-CimInstance -Namespace root/virtualization/v2 -ClassName Msvm_ComputerSystem)[0]
PS C:\> $VMHost | Get-CimDistantInstance.ps1 -PathToInstance 'Msvm_LANEndpoint/Msvm_LANEndpoint/Msvm_EthernetSwitchPort'
On a Hyper-V host, loads the management operating system instance, then walks the indicated path to find all related instances of Msvm_EthernetSwitchPort.
.LINK
https://ejsiron.github.io/Poshery/Get-CimDistantInstance
.LINK
Find-CimAssociatedInstance: https://ejsiron.github.io/Poshery/Find-CimAssociatedInstance
#>
[CmdletBinding()]
[OutputType([Microsoft.Management.Infrastructure.CimInstance[]])]
param
(
	[Parameter(Mandatory = $true, Position = 1, ValueFromPipeline = $true)][Microsoft.Management.Infrastructure.CimInstance]$InputObject,
	[Parameter(Position = 2)][String]$PathToInstance=[String]::Empty,
    [Parameter()][Switch]$KeyOnly,
    [Parameter()][Char]$Delimiter = '/'
)
$PathNodes = $PathToInstance.Split($Delimiter)
if ($PathNodes)
{
	$SearchInstances = @($InputObject)
	for ($i = 0; $i -lt $PathNodes.Length; $i++)
	{
		$ChildCounter = 1
		if ($SearchInstances)
		{
			$OnlyKeys = [bool]($KeyOnly -or $i -ne ($PathNodes.Count - 1))
			$TemporarySearchInstances = New-Object -TypeName System.Collections.ArrayList
			foreach ($SearchInstance in $SearchInstances)
			{
				Write-Progress -Activity 'Querying CIM instances' -Status ('At distance {0} of {1}' -f ($i + 1), $PathNodes.Count) -CurrentOperation ('Loading {0} instances related to {1}' -f $SearchInstances.Count, $SearchInstance.CimClass.CimClassName) -PercentComplete (($ChildCounter++) / $SearchInstances.Count * 100)
				$AssociatedInstances = @(Get-CimAssociatedInstance -InputObject $SearchInstance -ResultClassName $PathNodes[$i] -KeyOnly:$OnlyKeys)
				if ($AssociatedInstances)
				{
					$TemporarySearchInstances.AddRange($AssociatedInstances)
				}
			}
			Write-Progress -Activity 'Querying CIM instances' -Completed
			if ($TemporarySearchInstances.Count)
			{
				$SearchInstances = $TemporarySearchInstances
			}
			else
			{
				$SearchInstances.Clear()
			}
		}
	}
	$SearchInstances
}
